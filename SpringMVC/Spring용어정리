
2019-02-20 raongang 

간단한 용어정리
 
 1. Bean
   - 스프링이 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트 
   
 2. Spring Bean
   - 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 제어의역전(IoC)이 적용된 오브젝트
   
 3. BeanFactory
  - DI의 핵심으로써 ApplicationContext라고도 불린다.
  - 스프링에서 빈의 생성과 관계설정과 같은 제어의역전을 담당하는 IoC 오브젝트
  - 주로 이를 확장한 개념인 ApplicationContext라고도 한다.
    (BeanFactory에서 Bean 정의 파일 읽기, 메세지소스, 이벤트 처리등의 기능을 BeanFactory에 추가한 것이 ApplicationContext이다.)
    
    
	간단한 예제를 만들 경우 아래와 같은 식으로 구현한다.

           ApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);
           ProductService productService = ctx.getBean(ProductService.class);
           productService.addProduct(new Product("ホチキス", 100));
           Product product = productService.findByProductName("ホチキス");
           System.out.println(product); 
  
ContextPath 고찰

>> ContextPath를 지정하기 위해 <c:url 이나 pageContext.request.contextPath를 이용한다
c:url 꼭 적어야하나? 확인차 일단 작성해놓음
c:url이 없으면 주소가 http://localhost:8080/user/login 이렇게 되어버린다.
<c:url var="loginPath" value="/user/login" />
<c:url var="signUpPath" value="/user/signUp" />
<form action="${loginPath}" method="post"></form>

<div>pageContext.request.contextPath >> ${pageContext.request.contextPath}</div><%--여기 null나오네? 원인을 모르겠다 --%>
<div>pageContext.request.serverName >> ${pageContext.request.serverName}</div>
<div>pageContext.request.serverPort >> ${pageContext.request.serverPort}</div>
<div>pageContext.request.scheme >> ${pageContext.request.scheme}</div>
<div>pageContext.request.requestURL >> ${pageContext.request.requestURL}</div>
<div>pageContext.request.requestURI >> ${pageContext.request.requestURI}</div>
<div>pageContext.request.contextPath >> ${pageContext.request.contextPath}</div>	
     
     
  4. 자동로그인의 구현
    4-1. HTTP의 특징
        - connectionless : 클라이언트가 요청을 한 후 응답을 받으면 그 연결을 끊어버린다.  
        - stateless : 통신이 끝나면 상태를 유지하지 않는다.
        
    4-2. 쿠키 ( Cookie ) 
       - 클라이언트(브라우저) 로컬에 저장되는 키와 값이 들어 있는 데이터 파일
       - 유효시간이 정해지면 브라우저가 종료되어도 인증이 유지됨.
       - Response Header에 Set-Cookie 속성 사용으로 클라이언트에 쿠키 생성 가능
       - 쿠키는 따로 요청하지 않아도 브라우저가 Request시 Request Header에 넣어 자동 서버 전송
       
       4-2-1. 쿠키 동작 방식
           - 클라이언트가 서버에 페이지를 요청 >> Http Header에 쿠키를 포함시켜 응답 >> 브라우저가 종료되어도 쿠키 만료기간이 있다면 클라이언트에서 보관하고 있음 >> 같은 요청을 할 경우 
             Http Header에 쿠키를 넣어 서버에 전달 >> 서버에서는 쿠키 읽어 이전 상태 변경 필요시 업데이트된 쿠키를 Http 헤더에 포함시켜 응답.
             
       4-2-2. 쿠키 사용 예 
          - 방문사이트 로그인시 "아이디와 비밀번호를 저장하시겠습니까?"
          
    4-3. 세션 ( Session ) 
       - 쿠키 기반이지만 사용자 정보 파일을 서버에 저장
       - 세션ID를 사용하며 웹브라우저가 서버에 접속하여 브라우저를 종료할 때까지 인증상태를 유지
       
       4-3-1. 세션 동작 방식
          - 클라이언트가 서버에 접속시 서버에서 세션ID발급 >> 클라이언트는 세션ID에 대해 쿠키를 사용해서 저장(이때 쿠키이름은 JSESSIONID) >> 클라이언트가 서버에 다시 접속시 이 쿠키를 이용해서 
          세션 id값을 서버에 전달
       
       4-3-2. 세션 사용 예 
          - 로그인과 같은 보안에 중요한 ..
          
    4-4. 쿠키와 세션의 차이
       4-4-1. 라이프사이클 : 쿠키도 만료시간이 있지만 파일로 저장되기 때문에, 브라우저를 종료해도 계속해서 정보가 남아 있을 수 있다.
                          반면, 세션은 만료시간을 정할 수있지만, 브라우저가 종료되면 만료시간에 상관없이 삭제됨.
                          
	4-5. 자동 로그인시 고려사항
	  - 자동로그인시에는 보통 세션+쿠키를 같이 이용한다
	  
	  4-5-1. HttpSession에 login 이름으로 보관된 객체가 없고, loginCookie가 없는 경우.
	      - 로그인과 관련된 정보가 아예 없기 때문에, 로그인을 해야 하는 상황
	  4-5-2. HttpSession에 login이라는 이름으로 보관된 객체가 있고, loginCookie가 없는 경우
	      - 세션에 login이라는 이름으로 보관된 경우에는 현재 사용자가 로그인한 상황이다
	  4-5-3. HttpSession에 login이라는 이름으로 보관된 경우가 없고, loginCookie가 있는 경우 (이 경우 자동로그인)
	      - 사용자가 이전에 로그인한 이력이 있다는 것을 의미
	      - 브라우저가 종료되었기 때문에, HttpSession에는 login이라는 이름으로 보관된게 없고 loginCookie에는 기관설정이 있으므로 그 사이 접속기록이 있다는 것을 의미
	  4-5-4. HttpSession에 loing 이름으로 보관된 객체가 있고, loginCookie가 있는 경우
	      - 사용자는 현재 접속중.                          
                          
   4-5-3의 경우인데 이때는 HttpSession에 다시 login값으로 설정해야 한다.
     
     - 사용자가 로그인하면 DB에 현재 세션의 ID값과 유효기간을 기록한다
     - 사용자가 로그인하지 않은 상태에서 쿠키를 가지고 접속하면 쿠키의 내용물을 추출
     - 쿠키의 내용물로 데이터베이스를 조회해서 유효기간에 맞는 값인지 확인
     - 확인된 사용자는 세션에 로그인 정보를 기록해서 자동로그인이 되게 한다.
                               
                          
             